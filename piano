from random import sample
from turtle import goto
import RPi.GPIO as GPIO
from time import sleep,time
import pygame
from array import array
import math
MIXER_FREQ = 44100
MIXER_SIZE = -16
MIXER_CHANS = 1
MIXER_BUFF = 1024

class Note(pygame.mixer.Sound):
    def __init__(self, frequency, volume, wave_type):
        self.frequency = frequency
        self.wave_type = wave_type
        pygame.mixer.Sound.__init__(self,\
            buffer=self.build_samples())
        self.volume = volume

    def build_samples(self):
        period = int(round(MIXER_FREQ / self.frequency))
        amplitude = 2 ** (abs(MIXER_SIZE)-1)-1
        samples = array("h",[0] * period)

        if self.wave_type == "square":
                # square waveform
            for t in range(period):
                if (t < period / 2):
                    samples[t] = amplitude
                else:
                    samples[t] = -amplitude

        elif self.wave_type == "sawtooth":
            # sawtooth waveform
            for t in range(period):
                sample_value = amplitude * ((t / period) - 0.5) * 2
                sample_value = max(min(sample_value, amplitude), -amplitude)
                samples[t] = int(sample_value)
                
        elif self.wave_type == "triangle":
                # triangle waveform
            for t in range(period):
                sample_value = amplitude * (abs((t / period) - 0.5) - 0.25) * 4
                sample_value = max(min(sample_value, amplitude), -amplitude)
                samples[t] = int(sample_value)
        elif self.wave_type == "sin":
                # sin wave
            for t in range(period):
                sample_value = int(amplitude * math.sin(2.0 * math.pi * self.frequency * t / MIXER_FREQ))
                samples[t] = sample_value

        return samples

def wait_for_note_start():
        while (True):
            for key in range(len(keys)):
                if (GPIO.input(keys[key])):
                    return key
            if (GPIO.input(play)):
                while (GPIO.input(play)):
                    sleep(0.01)
                return "play"
            if (GPIO.input(record)):
                while (GPIO.input(record)):
                    return "record"
            sleep(0.01)

def wait_for_note_stop(key):
        while (GPIO.input(key)):
            sleep(0.1)

def play_song():
    for part in song:
        note, duration = part
        if (note == "SILENCE"):
            sleep(duration)
        else:
            notes[note].play(-1)
            sleep(duration)
            notes[note].stop()

pygame.mixer.pre_init(MIXER_FREQ, MIXER_SIZE, MIXER_CHANS, MIXER_BUFF)
pygame.init()

GPIO.setmode(GPIO.BCM)

keys = [20, 16, 12, 26]
freq = 261.6
notes = []
play = 19
waveforms = ["square", "sawtooth","triangle", "sin"]
record = 21
red = 27
green = 18
blue = 17

GPIO.setup(keys, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(play, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(record, GPIO.IN, GPIO.PUD_DOWN)

GPIO.setup(red, GPIO.OUT)
GPIO.setup(green, GPIO.OUT)
GPIO.setup(blue, GPIO.OUT)
for waveform in waveforms:
    notes.append(Note(freq,1, waveform))

recording = False
song = []

print("Welcome to the Paper Piano1")
print("Press Ctrl + C to exit....")

try:
    while (True):
        start = time()
        key = wait_for_note_start()
        duration = time() - start
        if (recording):
            song.append(["SILENCE", duration])
        if (key =='record'):
            if (not recording):
                song = []
                recording = not recording
                GPIO.output(red, recording)
        elif (key == "play"):
            if (recording): 
                recording = False
                GPIO.output(red, False)
                GPIO.output(green, True)
                play_song()
                GPIO.output(green, False)
        else:
            start = time()
            notes[key].play(-1)
            wait_for_note_stop(keys[key])
            notes[key].stop()
            duration = time() - start
            if (recording):
                song.append([key, duration])
except KeyboardInterrupt:
    GPIO.cleanup()
