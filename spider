import pygame
import pygame.sprite
from random import randint
from idk import *
from key import *

class Player(pygame.sprite.Sprite, Move):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        Move.__init__(self)
        self.image = pygame.image.load('my project.png') # load the wizard image
        self.rect = self.image.get_rect()
        self.getPosition
        self.setPosition
        self.bullets = pygame.sprite.Group() # create a sprite group for bullets
        
    def setPosition(self):
        self.x = randint(0, WIDTH)
        self.y = (HEIGHT - self.size)

    def getPosition(self):
        x_rect = self.x - self.size // 2
        y_rect = self.y - self.size // 2
        return (x_rect, y_rect)
    
    def update(self, pressedKeys):
        # Move the wizard left or right based on the direction argument
        if pressedKeys[K_LEFT]:
            self.goLeft()
        if pressedKeys[K_RIGHT]:
            self.goRight()
       # check if space bar is pressed to shoot bullet
        if pressedKeys[K_SPACE]:
            bullet = Bullet(p.rect.centerx, p.rect.top) # create a new bullet
            self.bullets.add(bullet)
        
# update the position of all bullets
        self.bullets.update()
        # remove bullets that go off the top of the screen
        for bullet in self.bullets.copy():
            if bullet.rect.bottom < 0:
                bullet.kill()

class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('bullet.png') # load the bullet image
        self.rect = self.image.get_rect()
        self.rect.centerx = x # set initial position of bullet
        self.rect.bottom = y
        self.speed = BLAST_SPEED # set speed of bullet movement

    def update(self):
        self.rect.y += self.speed # move bullet upwards

        # remove the bullet if it goes off the top of the screen
        if self.rect.bottom < 0:
            self.kill()

class Spider(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load('spider.png') # load the spider image
        self.rect = self.image.get_rect()
        self.rect.midtop = (0, randint(HEIGHT//2, HEIGHT)) # set random initial position of spider
        self.speed = randint(2, 6) # set random speed of spider movement

    def update(self):
        self.rect.x += self.speed # move spider right
        
        # check for collision with the right wall
        if self.rect.right >= WIDTH:
            self.kill() # remove the spider if it collides with the right wall
        
        # Check for collisions with bullets
        hits = pygame.sprite.spritecollide(self, p.bullets, True)
        if hits:
            self.kill() # remove the spider if it collides with a bullet




########################### Main Game ################################

# Initialize pygame library and display
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT)) 

# Load the font for the lives and score counter
font = pygame.font.Font(FONT_STYLE, FONT_SIZE)

# Create a person object
p = Player()

# Set initial values for lives and score
lives = MAX_LIVES
score = PLAYER_SCORE

# A variable to determine whether to get out of the infinite game loop
RUNNING = True  

while (RUNNING):
    # Look through all the events that happened in the last frame to see
    # if the user tried to exit.
    for event in pygame.event.get():
        if (event.type == KEYDOWN and event.key == K_ESCAPE):
            RUNNING = False
        elif (event.type == QUIT):
            RUNNING = False
        elif (event.type == KEYDOWN and event.key == K_SPACE):
            bullet = Bullet(p.rect.centerx, p.rect.top) # create a new bullet
            bullets.add(bullet)
    # Otherwise, collect the list/dictionary of all the keys that were
    # pressed
    pressedKeys = pygame.key.get_pressed()
    
    # and then send that dictionary to the Person object for them to
    # update themselves accordingly.
    p.update(pressedKeys)

    # fill the screen with a color
    screen.fill(WHITE)
    
    # Render the player sprite
    screen.blit(p.image, p.getPosition())
    
    # Render the score and lives counters
    score_label = font.render("Score: " + str(score), True, BLACK)
    lives_label = font.render("Lives: " + str(lives), True, BLACK)
    screen.blit(score_label, (10, 10))
    screen.blit(lives_label, (WIDTH - lives_label.get_width() - 10, 10))
    

    # creates the group to hold all the sprites
    # spiders is gonna be used for collision 
    # all spirtes are gonna be used to render
    spiders = pygame.sprite.Group()
    bullets = pygame.sprite.Group()


    # Update and render the spider sprite(s)
    spiders.update()
    spiders.draw(screen)
    
    # Update and render the bullets sprite(s)
    for bullet in p.bullets:
        bullet.update()
    bullets.draw(screen)
    
    # Check for collisions between spiders and bullets
    hits = pygame.sprite.groupcollide(spiders, p.bullets, True, True)
    if hits:
        score += 1
    
    # Check for collisions between player and spiders
    hits = pygame.sprite.spritecollide(p, spiders, True)
    if hits:
        lives -= 1
        if lives == 0:
            RUNNING = False
    
    pygame.display.flip()
    
# Quit pygame and exit the program
pygame.quit()
